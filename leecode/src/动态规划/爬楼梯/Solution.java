package 动态规划.爬楼梯;
/*
题目描述：
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶
动态规划：
不难发现这个问题被分解为一些包含最优子结构的子问题，即它的最优解可以从其子问题的最优解来有效的构建，我们可以用动态规划来解决
第i阶可以由以下几个方法构成：
1、在第(i-1)阶后向上爬一阶
2、在第(i-2)阶后向上爬两阶
所以到达第i阶的方法总数就是第(i-1)阶和第(i-2)阶的方法之和
另dp[i] = dp[i-1]+dp[i-2]
 */
public class Solution {
    public int climbStairs(int n) {
        if(n==1)return 1;
        int[] dp=new int[n+1];
        dp[1]=1;
        dp[2]=2;
        for (int i = 3; i <=n; i++) {
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
}
